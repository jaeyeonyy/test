#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>   
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>

// 디렉토리 내용 출력
// path: 디렉토리 경로
// is_detail: 상세 정보 출력 여부
void print_directory(const char *path, int is_detail) {
    DIR *dir = opendir(path);
    if (dir == NULL) {
        perror("opendir");
        return;
    }

    struct dirent *dent;
    while ((dent = readdir(dir))) {
        // -a 옵션이 아니므로 .과 ..은 무시
        if (strcmp(dent->d_name, ".") == 0 || strcmp(dent->d_name, "..") == 0) {
            continue;
        }
        if (is_detail) {
            // 상세 정보 출력: \t로 구분
            printf("%lu\t%ld\t%u\t%u\t%s\n",
                   (unsigned long)dent->d_ino,
                   (long)dent->d_off,
                   (unsigned int)dent->d_reclen,
                   (unsigned int)dent->d_type,
                   dent->d_name);
        } else {
            // 단순 이름만 출력
            printf("%s\n", dent->d_name);
        }
    }
    closedir(dir);
}

// 재귀적으로 디렉토리 출력
// path: 디렉토리 경로
// is_detail: 상세 정보 출력 여부
void print_recursive_directory(const char *path, int is_detail) {
    // 현재 디렉토리 위치 출력
    printf("current directory: %s\n", path);
    // 현재 디렉토리 출력
    print_directory(path, is_detail);

    DIR *dir = opendir(path);
    if (dir == NULL) {
        perror("opendir");
        return;
    }

    struct dirent *dent;
    while ((dent = readdir(dir))) {
        // .과 ..은 무시
        if (strcmp(dent->d_name, ".") == 0 || strcmp(dent->d_name, "..") == 0) {
            continue;
        }

        // 전체 경로 구성
        char full_path[1024];
        strcpy(full_path, path);
        strcat(full_path, "/");
        strcat(full_path, dent->d_name);

        // 파일 종류가 디렉토리일 경우만 재귀적으로 호출
        if (dent->d_type == DT_DIR) {
            print_recursive_directory(full_path, is_detail);
        }
    }

    closedir(dir);
}


int main(int argc, char *argv[]) {
    if (argc == 1) {
        // 인자가 없으면 현재 디렉토리의 목록을 단순하게 출력
        print_directory(".",0);
    } else if (argc == 2) {
        if (strcmp(argv[1], "-l") == 0) {
            // 현재 디렉토리를 상세하게 출력
            print_directory(".",1);
        } else if (strcmp(argv[1], "-r") == 0) {
            // 현재 디렉토리를 재귀적으로 출력
            print_recursive_directory(".",0);
        } else {
            // 인자가 디렉토리 이름인 경우 해당 디렉토리를 출력
            print_directory(argv[1],0);
        }
    } else if (argc == 3) {
        if (strcmp(argv[1], "-l") == 0) {
            // 인자로 받은 디렉토리를 상세하게 출력
            print_directory(argv[2],1);
        } else if (strcmp(argv[1], "-r") == 0) {
            // 인자로 받은 디렉토리를 재귀적으로 출력
            print_recursive_directory(argv[2],0);
        } else {
            // 잘못된 인자
            printf("can't use %s\n", argv[1]);
        }
    } else {
        // 잘못된 인자
        printf("can't use %s\n", argv[1]);
    }
    return 0;
}
